plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
    id 'org.jetbrains.dokka'
    id 'maven-publish'
    id 'signing'
}

android {
    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "0.1.0-alpha.07"
        consumerProguardFiles "consumer-rules.pro"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/dokka"
    configuration {
        includeNonPublic = false
        reportUndocumented = true
    }
}

task javadocJar(type: Jar, dependsOn: dokka) {
    classifier = 'javadoc'
    from dokka.outputDirectory
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
}

task androidSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives androidSourcesJar
    archives javadocJar
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                artifact bundleReleaseAar
                artifact androidSourcesJar
                artifact javadocJar

                groupId 'jabbar.jigariyo'
                artifactId 'playground-sdk'
                version android.defaultConfig.versionName

                pom {
                    packaging 'aar'
                    name = 'Playground SDK for Android'
                    description = 'Playground SDK for Android'

                    url = 'https://docs.test.com/docs'
                    withXml {
                        def dependenciesNode = asNode().appendNode('dependencies')

                        // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                        configurations.implementation.allDependencies.each {
                            // Ensure dependencies such as fileTree are not included in the pom.
                            if (it.name != 'unspecified') {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)
                            }
                        }
                    }
                }
            }

        }
        repositories {
            maven {
                name project.myRepoName
                url project.myRepoUrl
                credentials(AwsCredentials) {
                    accessKey project.myRepoUsername
                    secretKey project.myRepoPassword
                }
            }
        }
    }
}
